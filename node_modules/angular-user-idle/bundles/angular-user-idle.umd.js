(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('angular-user-idle', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['angular-user-idle'] = {}),global.ng.core,null,global.Rx.Observable.prototype));
}(this, (function (exports,i0,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserIdleConfig = /** @class */ (function () {
        function UserIdleConfig() {
        }
        return UserIdleConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * User's idle service.
     */
    var UserIdleService = /** @class */ (function () {
        function UserIdleService(config, _ngZone) {
            this._ngZone = _ngZone;
            this.timerStart$ = new rxjs.Subject();
            this.idleDetected$ = new rxjs.Subject();
            this.timeout$ = new rxjs.Subject();
            /**
             * Idle value in milliseconds.
             * Default equals to 10 minutes.
             */
            this.idleMillisec = 600 * 1000;
            /**
             * Idle buffer wait time milliseconds to collect user action
             * Default equals to 1 Sec.
             */
            this.idleSensitivityMillisec = 1000;
            /**
             * Timeout value in seconds.
             * Default equals to 5 minutes.
             */
            this.timeout = 300;
            /**
             * Ping value in milliseconds.
             * Default equals to 2 minutes.
             */
            this.pingMillisec = 120 * 1000;
            if (config) {
                this.setConfig(config);
            }
        }
        /**
         * Start watching for user idle and setup timer and ping.
         */
        /**
         * Start watching for user idle and setup timer and ping.
         * @return {?}
         */
        UserIdleService.prototype.startWatching = /**
         * Start watching for user idle and setup timer and ping.
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.activityEvents$) {
                    this.activityEvents$ = rxjs.merge(rxjs.fromEvent(window, 'mousemove'), rxjs.fromEvent(window, 'resize'), rxjs.fromEvent(document, 'keydown'));
                }
                this.idle$ = rxjs.from(this.activityEvents$);
                if (this.idleSubscription) {
                    this.idleSubscription.unsubscribe();
                }
                // If any of user events is not active for idle-seconds when start timer.
                this.idleSubscription = this.idle$
                    .pipe(operators.bufferTime(this.idleSensitivityMillisec), // Starting point of detecting of user's inactivity
                operators.filter(function (arr) { return !arr.length && !_this.isIdleDetected && !_this.isInactivityTimer; }), operators.tap(function () {
                    _this.isIdleDetected = true;
                    _this.idleDetected$.next(true);
                }), operators.switchMap(function () {
                    return _this._ngZone.runOutsideAngular(function () {
                        return rxjs.interval(1000).pipe(operators.takeUntil(rxjs.merge(_this.activityEvents$, rxjs.timer(_this.idleMillisec).pipe(operators.tap(function () {
                            _this.isInactivityTimer = true;
                            _this.timerStart$.next(true);
                        })))), operators.finalize(function () {
                            _this.isIdleDetected = false;
                            _this.idleDetected$.next(false);
                        }));
                    });
                }))
                    .subscribe();
                this.setupTimer(this.timeout);
                this.setupPing(this.pingMillisec);
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.stopWatching = /**
         * @return {?}
         */
            function () {
                this.stopTimer();
                if (this.idleSubscription) {
                    this.idleSubscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.stopTimer = /**
         * @return {?}
         */
            function () {
                this.isInactivityTimer = false;
                this.timerStart$.next(false);
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.resetTimer = /**
         * @return {?}
         */
            function () {
                this.stopTimer();
                this.isTimeout = false;
            };
        /**
         * Return observable for timer's countdown number that emits after idle.
         */
        /**
         * Return observable for timer's countdown number that emits after idle.
         * @return {?}
         */
        UserIdleService.prototype.onTimerStart = /**
         * Return observable for timer's countdown number that emits after idle.
         * @return {?}
         */
            function () {
                var _this = this;
                return this.timerStart$.pipe(operators.distinctUntilChanged(), operators.switchMap(function (start) { return (start ? _this.timer$ : rxjs.of(null)); }));
            };
        /**
         * Return observable for idle status changed
         */
        /**
         * Return observable for idle status changed
         * @return {?}
         */
        UserIdleService.prototype.onIdleStatusChanged = /**
         * Return observable for idle status changed
         * @return {?}
         */
            function () {
                return this.idleDetected$.asObservable();
            };
        /**
         * Return observable for timeout is fired.
         */
        /**
         * Return observable for timeout is fired.
         * @return {?}
         */
        UserIdleService.prototype.onTimeout = /**
         * Return observable for timeout is fired.
         * @return {?}
         */
            function () {
                var _this = this;
                return this.timeout$.pipe(operators.filter(function (timeout) { return !!timeout; }), operators.tap(function () { return (_this.isTimeout = true); }), operators.map(function () { return true; }));
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.getConfigValue = /**
         * @return {?}
         */
            function () {
                return {
                    idle: this.idleMillisec / 1000,
                    idleSensitivity: this.idleSensitivityMillisec / 1000,
                    timeout: this.timeout,
                    ping: this.pingMillisec / 1000
                };
            };
        /**
         * Set config values.
         * @param config
         */
        /**
         * Set config values.
         * @param {?} config
         * @return {?}
         */
        UserIdleService.prototype.setConfigValues = /**
         * Set config values.
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (this.idleSubscription && !this.idleSubscription.closed) {
                    console.error('Call stopWatching() before set config values');
                    return;
                }
                this.setConfig(config);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        UserIdleService.prototype.setConfig = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (config.idle) {
                    this.idleMillisec = config.idle * 1000;
                }
                if (config.ping) {
                    this.pingMillisec = config.ping * 1000;
                }
                if (config.idleSensitivity) {
                    this.idleSensitivityMillisec = config.idleSensitivity * 1000;
                }
                if (config.timeout) {
                    this.timeout = config.timeout;
                }
            };
        /**
         * Set custom activity events
         *
         * @param customEvents Example: merge(
         *   fromEvent(window, 'mousemove'),
         *   fromEvent(window, 'resize'),
         *   fromEvent(document, 'keydown'),
         *   fromEvent(document, 'touchstart'),
         *   fromEvent(document, 'touchend')
         * )
         */
        /**
         * Set custom activity events
         *
         * @param {?} customEvents Example: merge(
         *   fromEvent(window, 'mousemove'),
         *   fromEvent(window, 'resize'),
         *   fromEvent(document, 'keydown'),
         *   fromEvent(document, 'touchstart'),
         *   fromEvent(document, 'touchend')
         * )
         * @return {?}
         */
        UserIdleService.prototype.setCustomActivityEvents = /**
         * Set custom activity events
         *
         * @param {?} customEvents Example: merge(
         *   fromEvent(window, 'mousemove'),
         *   fromEvent(window, 'resize'),
         *   fromEvent(document, 'keydown'),
         *   fromEvent(document, 'touchstart'),
         *   fromEvent(document, 'touchend')
         * )
         * @return {?}
         */
            function (customEvents) {
                if (this.idleSubscription && !this.idleSubscription.closed) {
                    console.error('Call stopWatching() before set custom activity events');
                    return;
                }
                this.activityEvents$ = customEvents;
            };
        /**
         * Setup timer.
         *
         * Counts every seconds and return n+1 and fire timeout for last count.
         * @param timeout Timeout in seconds.
         */
        /**
         * Setup timer.
         *
         * Counts every seconds and return n+1 and fire timeout for last count.
         * @protected
         * @param {?} timeout Timeout in seconds.
         * @return {?}
         */
        UserIdleService.prototype.setupTimer = /**
         * Setup timer.
         *
         * Counts every seconds and return n+1 and fire timeout for last count.
         * @protected
         * @param {?} timeout Timeout in seconds.
         * @return {?}
         */
            function (timeout) {
                var _this = this;
                this._ngZone.runOutsideAngular(function () {
                    _this.timer$ = rxjs.of(new Date()).pipe(operators.switchMap(function (startDate) {
                        return rxjs.interval(1000).pipe(operators.map(function () { return Math.round((new Date().valueOf() - startDate.valueOf()) / 1000); }), //   convert elapsed count to seconds
                        operators.tap(function (elapsed) {
                            if (elapsed >= timeout) {
                                _this.timeout$.next(true);
                            }
                        }));
                    }));
                });
            };
        /**
         * Setup ping.
         *
         * Pings every ping-seconds only if is not timeout.
         * @param pingMillisec
         */
        /**
         * Setup ping.
         *
         * Pings every ping-seconds only if is not timeout.
         * @protected
         * @param {?} pingMillisec
         * @return {?}
         */
        UserIdleService.prototype.setupPing = /**
         * Setup ping.
         *
         * Pings every ping-seconds only if is not timeout.
         * @protected
         * @param {?} pingMillisec
         * @return {?}
         */
            function (pingMillisec) {
                var _this = this;
                this.ping$ = rxjs.interval(pingMillisec).pipe(operators.filter(function () { return !_this.isTimeout; }));
            };
        UserIdleService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        UserIdleService.ctorParameters = function () {
            return [
                { type: UserIdleConfig, decorators: [{ type: i0.Optional }] },
                { type: i0.NgZone }
            ];
        };
        /** @nocollapse */ UserIdleService.ngInjectableDef = i0.defineInjectable({ factory: function UserIdleService_Factory() { return new UserIdleService(i0.inject(UserIdleConfig, 8), i0.inject(i0.NgZone)); }, token: UserIdleService, providedIn: "root" });
        return UserIdleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserIdleModule = /** @class */ (function () {
        function UserIdleModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        UserIdleModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: UserIdleModule,
                    providers: [
                        { provide: UserIdleConfig, useValue: config }
                    ]
                };
            };
        UserIdleModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: []
                    },] },
        ];
        return UserIdleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.UserIdleService = UserIdleService;
    exports.UserIdleConfig = UserIdleConfig;
    exports.UserIdleModule = UserIdleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci11c2VyLWlkbGUudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9hbmd1bGFyLXVzZXItaWRsZS9saWIvYW5ndWxhci11c2VyLWlkbGUuY29uZmlnLnRzIiwibmc6Ly9hbmd1bGFyLXVzZXItaWRsZS9saWIvYW5ndWxhci11c2VyLWlkbGUuc2VydmljZS50cyIsIm5nOi8vYW5ndWxhci11c2VyLWlkbGUvbGliL2FuZ3VsYXItdXNlci1pZGxlLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVXNlcklkbGVDb25maWcge1xuICAvKipcbiAgICogSWRsZSB2YWx1ZSBpbiBzZWNvbmRzLlxuICAgKi9cbiAgaWRsZT86IG51bWJlcjtcbiAgLyoqXG4gICAqIFRpbWVvdXQgdmFsdWUgaW4gc2Vjb25kcy5cbiAgICovXG4gIHRpbWVvdXQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBQaW5nIHZhbHVlIGluIHNlY29uZHMuXG4gICAqL1xuICBwaW5nPzogbnVtYmVyO1xuICAvKipcbiAgICogSWRsZVNlbnNpdGl2aXR5IHRpbWUgdGhhdCBhY3Rpdml0eSBtdXN0IHJlbWFpbiBiZWxvdyB0aGUgaWRsZSBkZXRlY3Rpb24gdGhyZXNob2xkIGJlZm9yZVxuICAgKiBpZGxlIGJ1ZmZlciB0aW1lciBjb3VudCB1c2VyJ3MgYWN0aXZpdHkgYWN0aW9ucywgaW4gc2Vjb25kcy5cbiAgICovXG4gIGlkbGVTZW5zaXRpdml0eT86IG51bWJlcjtcbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGZyb20sXG4gIGZyb21FdmVudCxcbiAgaW50ZXJ2YWwsXG4gIG1lcmdlLFxuICBPYnNlcnZhYmxlLFxuICBvZixcbiAgU3ViamVjdCxcbiAgU3Vic2NyaXB0aW9uLFxuICB0aW1lclxufSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGJ1ZmZlclRpbWUsXG4gIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICBmaWx0ZXIsXG4gIGZpbmFsaXplLFxuICBtYXAsXG4gIHN3aXRjaE1hcCxcbiAgdGFrZVVudGlsLFxuICB0YXBcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVXNlcklkbGVDb25maWcgfSBmcm9tICcuL2FuZ3VsYXItdXNlci1pZGxlLmNvbmZpZyc7XG5cbi8qKlxuICogVXNlcidzIGlkbGUgc2VydmljZS5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVXNlcklkbGVTZXJ2aWNlIHtcbiAgcGluZyQ6IE9ic2VydmFibGU8YW55PjtcblxuICAvKipcbiAgICogRXZlbnRzIHRoYXQgY2FuIGludGVycnVwdHMgdXNlcidzIGluYWN0aXZpdHkgdGltZXIuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWN0aXZpdHlFdmVudHMkOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgcHJvdGVjdGVkIHRpbWVyU3RhcnQkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgcHJvdGVjdGVkIGlkbGVEZXRlY3RlZCQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICBwcm90ZWN0ZWQgdGltZW91dCQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICBwcm90ZWN0ZWQgaWRsZSQ6IE9ic2VydmFibGU8YW55PjtcbiAgcHJvdGVjdGVkIHRpbWVyJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAvKipcbiAgICogSWRsZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuXG4gICAqIERlZmF1bHQgZXF1YWxzIHRvIDEwIG1pbnV0ZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgaWRsZU1pbGxpc2VjID0gNjAwICogMTAwMDtcbiAgLyoqXG4gICAqIElkbGUgYnVmZmVyIHdhaXQgdGltZSBtaWxsaXNlY29uZHMgdG8gY29sbGVjdCB1c2VyIGFjdGlvblxuICAgKiBEZWZhdWx0IGVxdWFscyB0byAxIFNlYy5cbiAgICovXG4gIHByb3RlY3RlZCBpZGxlU2Vuc2l0aXZpdHlNaWxsaXNlYyA9IDEwMDA7XG4gIC8qKlxuICAgKiBUaW1lb3V0IHZhbHVlIGluIHNlY29uZHMuXG4gICAqIERlZmF1bHQgZXF1YWxzIHRvIDUgbWludXRlcy5cbiAgICovXG4gIHByb3RlY3RlZCB0aW1lb3V0ID0gMzAwO1xuICAvKipcbiAgICogUGluZyB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuXG4gICAqIERlZmF1bHQgZXF1YWxzIHRvIDIgbWludXRlcy5cbiAgICovXG4gIHByb3RlY3RlZCBwaW5nTWlsbGlzZWMgPSAxMjAgKiAxMDAwO1xuICAvKipcbiAgICogVGltZW91dCBzdGF0dXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgaXNUaW1lb3V0OiBib29sZWFuO1xuICAvKipcbiAgICogVGltZXIgb2YgdXNlcidzIGluYWN0aXZpdHkgaXMgaW4gcHJvZ3Jlc3MuXG4gICAqL1xuICBwcm90ZWN0ZWQgaXNJbmFjdGl2aXR5VGltZXI6IGJvb2xlYW47XG4gIHByb3RlY3RlZCBpc0lkbGVEZXRlY3RlZDogYm9vbGVhbjtcblxuICBwcm90ZWN0ZWQgaWRsZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGNvbmZpZzogVXNlcklkbGVDb25maWcsIHByaXZhdGUgX25nWm9uZTogTmdab25lKSB7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgd2F0Y2hpbmcgZm9yIHVzZXIgaWRsZSBhbmQgc2V0dXAgdGltZXIgYW5kIHBpbmcuXG4gICAqL1xuICBzdGFydFdhdGNoaW5nKCkge1xuICAgIGlmICghdGhpcy5hY3Rpdml0eUV2ZW50cyQpIHtcbiAgICAgIHRoaXMuYWN0aXZpdHlFdmVudHMkID0gbWVyZ2UoXG4gICAgICAgIGZyb21FdmVudCh3aW5kb3csICdtb3VzZW1vdmUnKSxcbiAgICAgICAgZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpLFxuICAgICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICdrZXlkb3duJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5pZGxlJCA9IGZyb20odGhpcy5hY3Rpdml0eUV2ZW50cyQpO1xuXG4gICAgaWYgKHRoaXMuaWRsZVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5pZGxlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgLy8gSWYgYW55IG9mIHVzZXIgZXZlbnRzIGlzIG5vdCBhY3RpdmUgZm9yIGlkbGUtc2Vjb25kcyB3aGVuIHN0YXJ0IHRpbWVyLlxuICAgIHRoaXMuaWRsZVN1YnNjcmlwdGlvbiA9IHRoaXMuaWRsZSRcbiAgICAgIC5waXBlKFxuICAgICAgICBidWZmZXJUaW1lKHRoaXMuaWRsZVNlbnNpdGl2aXR5TWlsbGlzZWMpLCAvLyBTdGFydGluZyBwb2ludCBvZiBkZXRlY3Rpbmcgb2YgdXNlcidzIGluYWN0aXZpdHlcbiAgICAgICAgZmlsdGVyKFxuICAgICAgICAgIGFyciA9PiAhYXJyLmxlbmd0aCAmJiAhdGhpcy5pc0lkbGVEZXRlY3RlZCAmJiAhdGhpcy5pc0luYWN0aXZpdHlUaW1lclxuICAgICAgICApLFxuICAgICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaXNJZGxlRGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaWRsZURldGVjdGVkJC5uZXh0KHRydWUpO1xuICAgICAgICB9KSxcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+XG4gICAgICAgICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+XG4gICAgICAgICAgICBpbnRlcnZhbCgxMDAwKS5waXBlKFxuICAgICAgICAgICAgICB0YWtlVW50aWwoXG4gICAgICAgICAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2aXR5RXZlbnRzJCxcbiAgICAgICAgICAgICAgICAgIHRpbWVyKHRoaXMuaWRsZU1pbGxpc2VjKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNJbmFjdGl2aXR5VGltZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGltZXJTdGFydCQubmV4dCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSWRsZURldGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGxlRGV0ZWN0ZWQkLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgpO1xuXG4gICAgdGhpcy5zZXR1cFRpbWVyKHRoaXMudGltZW91dCk7XG4gICAgdGhpcy5zZXR1cFBpbmcodGhpcy5waW5nTWlsbGlzZWMpO1xuICB9XG5cbiAgc3RvcFdhdGNoaW5nKCkge1xuICAgIHRoaXMuc3RvcFRpbWVyKCk7XG4gICAgaWYgKHRoaXMuaWRsZVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5pZGxlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgc3RvcFRpbWVyKCkge1xuICAgIHRoaXMuaXNJbmFjdGl2aXR5VGltZXIgPSBmYWxzZTtcbiAgICB0aGlzLnRpbWVyU3RhcnQkLm5leHQoZmFsc2UpO1xuICB9XG5cbiAgcmVzZXRUaW1lcigpIHtcbiAgICB0aGlzLnN0b3BUaW1lcigpO1xuICAgIHRoaXMuaXNUaW1lb3V0ID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIG9ic2VydmFibGUgZm9yIHRpbWVyJ3MgY291bnRkb3duIG51bWJlciB0aGF0IGVtaXRzIGFmdGVyIGlkbGUuXG4gICAqL1xuICBvblRpbWVyU3RhcnQoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy50aW1lclN0YXJ0JC5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIHN3aXRjaE1hcChzdGFydCA9PiAoc3RhcnQgPyB0aGlzLnRpbWVyJCA6IG9mKG51bGwpKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBvYnNlcnZhYmxlIGZvciBpZGxlIHN0YXR1cyBjaGFuZ2VkXG4gICAqL1xuICBvbklkbGVTdGF0dXNDaGFuZ2VkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmlkbGVEZXRlY3RlZCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIG9ic2VydmFibGUgZm9yIHRpbWVvdXQgaXMgZmlyZWQuXG4gICAqL1xuICBvblRpbWVvdXQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMudGltZW91dCQucGlwZShcbiAgICAgIGZpbHRlcih0aW1lb3V0ID0+ICEhdGltZW91dCksXG4gICAgICB0YXAoKCkgPT4gKHRoaXMuaXNUaW1lb3V0ID0gdHJ1ZSkpLFxuICAgICAgbWFwKCgpID0+IHRydWUpXG4gICAgKTtcbiAgfVxuXG4gIGdldENvbmZpZ1ZhbHVlKCk6IFVzZXJJZGxlQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWRsZTogdGhpcy5pZGxlTWlsbGlzZWMgLyAxMDAwLFxuICAgICAgaWRsZVNlbnNpdGl2aXR5OiB0aGlzLmlkbGVTZW5zaXRpdml0eU1pbGxpc2VjIC8gMTAwMCxcbiAgICAgIHRpbWVvdXQ6IHRoaXMudGltZW91dCxcbiAgICAgIHBpbmc6IHRoaXMucGluZ01pbGxpc2VjIC8gMTAwMFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU2V0IGNvbmZpZyB2YWx1ZXMuXG4gICAqIEBwYXJhbSBjb25maWdcbiAgICovXG4gIHNldENvbmZpZ1ZhbHVlcyhjb25maWc6IFVzZXJJZGxlQ29uZmlnKSB7XG4gICAgaWYgKHRoaXMuaWRsZVN1YnNjcmlwdGlvbiAmJiAhdGhpcy5pZGxlU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgY29uc29sZS5lcnJvcignQ2FsbCBzdG9wV2F0Y2hpbmcoKSBiZWZvcmUgc2V0IGNvbmZpZyB2YWx1ZXMnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldENvbmZpZyhjb25maWcpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDb25maWcoY29uZmlnOiBVc2VySWRsZUNvbmZpZykge1xuICAgIGlmIChjb25maWcuaWRsZSkge1xuICAgICAgdGhpcy5pZGxlTWlsbGlzZWMgPSBjb25maWcuaWRsZSAqIDEwMDA7XG4gICAgfVxuICAgIGlmIChjb25maWcucGluZykge1xuICAgICAgdGhpcy5waW5nTWlsbGlzZWMgPSBjb25maWcucGluZyAqIDEwMDA7XG4gICAgfVxuICAgIGlmIChjb25maWcuaWRsZVNlbnNpdGl2aXR5KSB7XG4gICAgICB0aGlzLmlkbGVTZW5zaXRpdml0eU1pbGxpc2VjID0gY29uZmlnLmlkbGVTZW5zaXRpdml0eSAqIDEwMDA7XG4gICAgfVxuICAgIGlmIChjb25maWcudGltZW91dCkge1xuICAgICAgdGhpcy50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBjdXN0b20gYWN0aXZpdHkgZXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSBjdXN0b21FdmVudHMgRXhhbXBsZTogbWVyZ2UoXG4gICAqICAgZnJvbUV2ZW50KHdpbmRvdywgJ21vdXNlbW92ZScpLFxuICAgKiAgIGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKSxcbiAgICogICBmcm9tRXZlbnQoZG9jdW1lbnQsICdrZXlkb3duJyksXG4gICAqICAgZnJvbUV2ZW50KGRvY3VtZW50LCAndG91Y2hzdGFydCcpLFxuICAgKiAgIGZyb21FdmVudChkb2N1bWVudCwgJ3RvdWNoZW5kJylcbiAgICogKVxuICAgKi9cbiAgc2V0Q3VzdG9tQWN0aXZpdHlFdmVudHMoY3VzdG9tRXZlbnRzOiBPYnNlcnZhYmxlPGFueT4pIHtcbiAgICBpZiAodGhpcy5pZGxlU3Vic2NyaXB0aW9uICYmICF0aGlzLmlkbGVTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDYWxsIHN0b3BXYXRjaGluZygpIGJlZm9yZSBzZXQgY3VzdG9tIGFjdGl2aXR5IGV2ZW50cycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYWN0aXZpdHlFdmVudHMkID0gY3VzdG9tRXZlbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIHRpbWVyLlxuICAgKlxuICAgKiBDb3VudHMgZXZlcnkgc2Vjb25kcyBhbmQgcmV0dXJuIG4rMSBhbmQgZmlyZSB0aW1lb3V0IGZvciBsYXN0IGNvdW50LlxuICAgKiBAcGFyYW0gdGltZW91dCBUaW1lb3V0IGluIHNlY29uZHMuXG4gICAqL1xuICBwcm90ZWN0ZWQgc2V0dXBUaW1lcih0aW1lb3V0OiBudW1iZXIpIHtcbiAgICB0aGlzLl9uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy50aW1lciQgPSBvZihuZXcgRGF0ZSgpKS5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoc3RhcnREYXRlID0+IGludGVydmFsKDEwMDApLnBpcGUoXG4gICAgICAgICAgbWFwKCgpID0+IE1hdGgucm91bmQoKG5ldyBEYXRlKCkudmFsdWVPZigpIC0gc3RhcnREYXRlLnZhbHVlT2YoKSkgLyAxMDAwKSksICAvLyAgIGNvbnZlcnQgZWxhcHNlZCBjb3VudCB0byBzZWNvbmRzXG4gICAgICAgICAgdGFwKGVsYXBzZWQgPT4ge1xuICAgICAgICAgICAgaWYgKGVsYXBzZWQgPj0gdGltZW91dCkge1xuICAgICAgICAgICAgICB0aGlzLnRpbWVvdXQkLm5leHQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgKVxuICAgICAgICApKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR1cCBwaW5nLlxuICAgKlxuICAgKiBQaW5ncyBldmVyeSBwaW5nLXNlY29uZHMgb25seSBpZiBpcyBub3QgdGltZW91dC5cbiAgICogQHBhcmFtIHBpbmdNaWxsaXNlY1xuICAgKi9cbiAgcHJvdGVjdGVkIHNldHVwUGluZyhwaW5nTWlsbGlzZWM6IG51bWJlcikge1xuICAgIHRoaXMucGluZyQgPSBpbnRlcnZhbChwaW5nTWlsbGlzZWMpLnBpcGUoZmlsdGVyKCgpID0+ICF0aGlzLmlzVGltZW91dCkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXNlcklkbGVDb25maWcgfSBmcm9tICcuL2FuZ3VsYXItdXNlci1pZGxlLmNvbmZpZyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJJZGxlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBVc2VySWRsZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8VXNlcklkbGVNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFVzZXJJZGxlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBVc2VySWRsZUNvbmZpZywgdXNlVmFsdWU6IGNvbmZpZ31cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXSwibmFtZXMiOlsiU3ViamVjdCIsIm1lcmdlIiwiZnJvbUV2ZW50IiwiZnJvbSIsImJ1ZmZlclRpbWUiLCJmaWx0ZXIiLCJ0YXAiLCJzd2l0Y2hNYXAiLCJpbnRlcnZhbCIsInRha2VVbnRpbCIsInRpbWVyIiwiZmluYWxpemUiLCJkaXN0aW5jdFVudGlsQ2hhbmdlZCIsIm9mIiwibWFwIiwiSW5qZWN0YWJsZSIsIk9wdGlvbmFsIiwiTmdab25lIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQUFBO1NBa0JDO1FBQUQscUJBQUM7SUFBRCxDQUFDOzs7Ozs7QUNsQkQ7OztBQTJCQTtRQWdERSx5QkFBd0IsTUFBc0IsRUFBVSxPQUFlO1lBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtZQXJDN0QsZ0JBQVcsR0FBRyxJQUFJQSxZQUFPLEVBQVcsQ0FBQztZQUNyQyxrQkFBYSxHQUFHLElBQUlBLFlBQU8sRUFBVyxDQUFDO1lBQ3ZDLGFBQVEsR0FBRyxJQUFJQSxZQUFPLEVBQVcsQ0FBQzs7Ozs7WUFPbEMsaUJBQVksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDOzs7OztZQUsxQiw0QkFBdUIsR0FBRyxJQUFJLENBQUM7Ozs7O1lBSy9CLFlBQU8sR0FBRyxHQUFHLENBQUM7Ozs7O1lBS2QsaUJBQVksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBY2xDLElBQUksTUFBTSxFQUFFO2dCQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRjs7Ozs7Ozs7UUFLRCx1Q0FBYTs7OztZQUFiO2dCQUFBLGlCQW9EQztnQkFuREMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7b0JBQ3pCLElBQUksQ0FBQyxlQUFlLEdBQUdDLFVBQUssQ0FDMUJDLGNBQVMsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEVBQzlCQSxjQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUMzQkEsY0FBUyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FDL0IsQ0FBQztpQkFDSDtnQkFFRCxJQUFJLENBQUMsS0FBSyxHQUFHQyxTQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUV4QyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDekIsSUFBSSxDQUFDLGdCQUFnQixD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