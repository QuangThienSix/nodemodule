import { Component, Input, ViewChild, Output, EventEmitter, forwardRef, ChangeDetectionStrategy } from '@angular/core';
import * as editor from 'jsoneditor';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { JsonEditorOptions } from './jsoneditoroptions';
var JsonEditorComponent = /** @class */ (function () {
    function JsonEditorComponent() {
        this.id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);
        this.disabled = false;
        this.isFocused = false;
        this.optionsChanged = false;
        this._data = {};
        this.options = new JsonEditorOptions();
        this.debug = false;
        this.change = new EventEmitter();
        this.jsonChange = new EventEmitter();
        // Implemented as part of ControlValueAccessor.
        this.onTouched = function () {
        };
        // Implemented as part of ControlValueAccessor.
        this.onChangeModel = function (e) {
        };
    }
    Object.defineProperty(JsonEditorComponent.prototype, "data", {
        set: function (value) {
            this._data = value;
            if (this.editor) {
                this.editor.destroy();
                this.ngOnInit();
            }
        },
        enumerable: false,
        configurable: true
    });
    JsonEditorComponent.prototype.ngOnInit = function () {
        var optionsBefore = this.options;
        if (!this.optionsChanged && this.editor) {
            optionsBefore = this.editor.options;
        }
        if (!this.options.onChangeJSON && this.jsonChange) {
            this.options.onChangeJSON = this.onChangeJSON.bind(this);
        }
        if (!this.options.onChange && this.change) {
            this.options.onChange = this.onChange.bind(this);
        }
        var optionsCopy = Object.assign({}, optionsBefore);
        // expandAll is an option only supported by ang-jsoneditor and not by the the original jsoneditor.
        delete optionsCopy.expandAll;
        if (this.debug) {
            console.log(optionsCopy, this._data);
        }
        if (!this.jsonEditorContainer.nativeElement) {
            console.error("Can't find the ElementRef reference for jsoneditor)");
        }
        if (optionsCopy.mode === 'text' || optionsCopy.mode === 'code') {
            optionsCopy.onChangeJSON = null;
        }
        this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsCopy, this._data);
        if (this.options.expandAll) {
            this.editor.expandAll();
        }
    };
    JsonEditorComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    /**
     * ngModel
     * ControlValueAccessor
     */
    // ControlValueAccessor implementation
    JsonEditorComponent.prototype.writeValue = function (value) {
        this.data = value;
    };
    // Implemented as part of ControlValueAccessor
    JsonEditorComponent.prototype.registerOnChange = function (fn) {
        this.onChangeModel = fn;
    };
    // Implemented as part of ControlValueAccessor.
    JsonEditorComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    // Implemented as part of ControlValueAccessor.
    JsonEditorComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    JsonEditorComponent.prototype.onChange = function (e) {
        if (this.editor) {
            try {
                var json = this.editor.get();
                this.onChangeModel(json);
                this.change.emit(json);
            }
            catch (e) {
                if (this.debug) {
                    console.log(e);
                }
            }
        }
    };
    JsonEditorComponent.prototype.onChangeJSON = function (e) {
        if (this.editor) {
            try {
                this.jsonChange.emit(this.editor.get());
            }
            catch (e) {
                if (this.debug) {
                    console.log(e);
                }
            }
        }
    };
    /**
     * JSON EDITOR FUNCTIONS
     */
    JsonEditorComponent.prototype.collapseAll = function () {
        this.editor.collapseAll();
    };
    JsonEditorComponent.prototype.expandAll = function () {
        this.editor.expandAll();
    };
    JsonEditorComponent.prototype.focus = function () {
        this.editor.focus();
    };
    JsonEditorComponent.prototype.get = function () {
        return this.editor.get();
    };
    JsonEditorComponent.prototype.getMode = function () {
        return this.editor.getMode();
    };
    JsonEditorComponent.prototype.getName = function () {
        return this.editor.getName();
    };
    JsonEditorComponent.prototype.getText = function () {
        return this.editor.getText();
    };
    JsonEditorComponent.prototype.set = function (json) {
        this.editor.set(json);
    };
    JsonEditorComponent.prototype.setMode = function (mode) {
        this.editor.setMode(mode);
    };
    JsonEditorComponent.prototype.setName = function (name) {
        this.editor.setName(name);
    };
    JsonEditorComponent.prototype.setSelection = function (start, end) {
        this.editor.setSelection(start, end);
    };
    JsonEditorComponent.prototype.getSelection = function () {
        return this.editor.getSelection();
    };
    JsonEditorComponent.prototype.getValidateSchema = function () {
        return this.editor.validateSchema;
    };
    JsonEditorComponent.prototype.setSchema = function (schema, schemaRefs) {
        this.editor.setSchema(schema, schemaRefs);
    };
    JsonEditorComponent.prototype.search = function (query) {
        this.editor.search(query);
    };
    JsonEditorComponent.prototype.setOptions = function (newOptions) {
        if (this.editor) {
            this.editor.destroy();
        }
        this.optionsChanged = true;
        this.options = newOptions;
        this.ngOnInit();
    };
    JsonEditorComponent.prototype.update = function (json) {
        this.editor.update(json);
    };
    JsonEditorComponent.prototype.destroy = function () {
        this.editor.destroy();
    };
    JsonEditorComponent.prototype.getEditor = function () {
        return this.editor;
    };
    JsonEditorComponent.prototype.isValidJson = function () {
        try {
            JSON.parse(this.getText());
            return true;
        }
        catch (e) {
            return false;
        }
    };
    JsonEditorComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'json-editor',
                    template: "<div [id]=\"id\" #jsonEditorContainer></div>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return JsonEditorComponent; }),
                            multi: true
                        }
                    ],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] }
    ];
    JsonEditorComponent.ctorParameters = function () { return []; };
    JsonEditorComponent.propDecorators = {
        jsonEditorContainer: [{ type: ViewChild, args: ['jsonEditorContainer', { static: true },] }],
        options: [{ type: Input }],
        data: [{ type: Input, args: ['data',] }],
        debug: [{ type: Input }],
        change: [{ type: Output }],
        jsonChange: [{ type: Output }]
    };
    return JsonEditorComponent;
}());
export { JsonEditorComponent };
export { JsonEditorOptions };
//# sourceMappingURL=data:application/json;base64,